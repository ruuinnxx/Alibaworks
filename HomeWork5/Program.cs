using System;
using System.IO;
using System.Threading.Tasks;
using PatternsHomework.Singleton;
using PatternsHomework.Builder;
using PatternsHomework.Prototype;

namespace PatternsHomework
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("=== Singleton Demo ===");
            SingletonDemo();

            Console.WriteLine("\n=== Builder Demo ===");
            BuilderDemo();

            Console.WriteLine("\n=== Prototype Demo ===");
            PrototypeDemo();
        }

        static void SingletonDemo()
        {
            string path = "appsettings_demo.json";
            var cfg = ConfigurationManager.GetInstance();

            if (!File.Exists(path))
            {
                cfg.LoadDefaults();
                cfg.SaveToFile(path);
            }
            else
            {
                cfg.LoadFromFile(path);
            }

            Console.WriteLine("Initial settings:");
            foreach (var kv in cfg.GetAll())
                Console.WriteLine($"{kv.Key} = {kv.Value}");

            // Многопоточная проверка
            Task[] tasks = new Task[5];
            for (int i = 0; i < tasks.Length; i++)
            {
                int idx = i;
                tasks[i] = Task.Run(() =>
                {
                    var inst = ConfigurationManager.GetInstance();
                    Console.WriteLine($"Thread {idx}: hash = {inst.GetHashCode()}");
                    inst.Set($"Thread{idx}_Key", $"Value_{idx}");
                });
            }
            Task.WaitAll(tasks);

            Console.WriteLine("\nSettings after threads:");
            foreach (var kv in cfg.GetAll())
                Console.WriteLine($"{kv.Key} = {kv.Value}");
        }

        static void BuilderDemo()
        {
            var director = new ReportDirector();

            var textBuilder = new TextReportBuilder();
            director.ConstructBasicReport(textBuilder, "Monthly Report", "Everything is OK.\nSales: 123", "Generated by TextReportBuilder");
            Console.WriteLine(textBuilder.GetReport());

            var htmlBuilder = new HtmlReportBuilder();
            director.ConstructBasicReport(htmlBuilder, "Monthly Report", "Everything is OK.\nSales: 123", "Generated by HtmlReportBuilder");
            var htmlReport = htmlBuilder.GetReport();
            Console.WriteLine($"\nHTML version:\n{htmlReport.Header}\n{htmlReport.Content}\n{htmlReport.Footer}");
        }

        static void PrototypeDemo()
        {
            var templateOrder = new Order
            {
                ShippingCost = 5.0m,
                PaymentMethod = "Card",
                Products = { new Product { Name = "T-Shirt", Price = 20, Quantity = 2 } },
                Discounts = { new Discount { Description = "Welcome", Amount = 5 } }
            };

            var order1 = templateOrder.CloneDeep();
            order1.Products[0].Quantity = 3;
            order1.Discounts.Add(new Discount { Description = "Promo", Amount = 2 });

            Console.WriteLine("Template:");
            Console.WriteLine(templateOrder);

            Console.WriteLine("\nClone (modified):");
            Console.WriteLine(order1);
        }
    }
}
